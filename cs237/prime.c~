/* (c)Qianwen (Tiffany) Zheng
 * This program reads an integer from the input and prints out the two prime 
 * numbers that are closest to it (in both the negative and positive directions
 * on the number line, if applicable), other than itself (if it is prime). 
 * If the user enters a negative number, he is prompted to enter a positive one.
 * 9/17/17  
 */
#include <stdio.h>

/*
 *PRE: The function will only be called on odd numbers. The given integer n
 *must be odd since even numbers other than two are not prime.
 *POST: Returns 1 if n is prime.
 */
int isPrime(int n)
{
  if(n==1)
    return 0;
  
  //Divides n by increasing odd numbers
  for(int i = 3; i*i<=n; i+=2) {
    if(n%i == 0)
      return 0;
  }
  return 1;
}

/*
 * Prints the closest prime numbers smaller and larger than the given 
 * integer n to output.
 */
void getPrimes(int n)
{
  //Determines the closest odd numbers smaller and larger than n
  int small; 
  int large;
  if(n%2 == 0){
    small = n-1;
    large = n+1;
  }else{
    small = n-2;
    large = n+2;
  }

  //Iterates through odd numbers less than n and checks for a prime
  while(small>2 && isPrime(small)==0){
    small-=2;
  }
  //Iterates through odd numbers greater than n and checks for a prime
  while(isPrime(large)==0){
    large+=2;
  }
    printf("\n%d\n%d\n", small, large);
}

//Reads in an integer from input and prints its closest primes
int main()
{
  int n;          //integer read from input
  scanf("%d",&n);
  
 //Special case when the closest prime smaller than n is not odd
  if(n==3){
    printf("\n%d\n%d\n", 2, 5);
  }
  //Special case when n is two
  else if(n==2){
    printf("\n%d\n",3);
  }
  //Special cases when the closest prime larger than n is two
  else if(n==0||n==1){
    printf("\n%d\n",2);
  }
  //Special case when n is negative
  else if(n<0){
    printf("\n%s\n", "Error: negative numbers not valid input!");
    return -1;
  }
  //All other cases
  else{
    getPrimes(n);
    return -1;
  }
}
